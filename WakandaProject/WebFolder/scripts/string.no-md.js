//****************************************************************************************************
// MODULE: string
//****************************************************************************************************
//----------------------------------------------------------------------------------------------------
({define: typeof define === 'function' ? define : function (A,F) {var I = F.apply(null, A.map(require)); Object.keys(I).forEach(function(k) {exports[k] = I[k];});}}).define(

[], // No module dependencies.


function () {
	"use strict";
	
	var CASE;
	var make;
	var nativeStringPrototype = String.prototype;
	var publicInterface;
	
	//****************************************************************************************************
	// Constants
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
		

	CASE = {
			INSENSITIVE : 'INSENSITIVE',
			SENSITIVE 	: 'SENSITIVE'
		};

	Object.freeze(CASE);
	
	//****************************************************************************************************
	//****************************************************************************************************
	// Private Module Functions
	//****************************************************************************************************
	//****************************************************************************************************
	
	//****************************************************************************************************
	// attachNativeStringProperties
	//****************************************************************************************************
	function attachNativeStringProperties () {
		var name;
		var nativeProperties = getNativeStringProperties();

		for (name in nativeProperties) {
		    (function (name) {
		        var stringProp = nativeStringPrototype[name];
		        
		        if (typeof stringProp == 'function') {
		            //console.log(stringProp)
		            if (!Str.prototype[name]) {
		                if (nativeProperties[name] === 'string') {
		                    Str.prototype[name] = function() {
		                        //console.log(name)
		                        return new this.constructor(stringProp.apply(this.s, arguments));
		                    }
		                }
		                else {
		                    Str.prototype[name] = stringProp;
		                }
		            }
		        }
		    })(name);
		}
	}
	
	//****************************************************************************************************
	// getCaseOption
	//****************************************************************************************************
	function getCaseOption (caseOption) {
		return typeof caseOption === 'string' && CASE.hasOwnProperty(caseOption) ? caseOption : CASE.INSENSITIVE;
	}
	
	//****************************************************************************************************
	// getNativeStringProperties
	//****************************************************************************************************
	function getNativeStringProperties () {
		var func;
		var i;
		var name;
	    var names = getNativeStringPropertyNames();
	    var retObj = {};
		var type;
		
	    for (i = 0; i < names.length; ++i) {
	        name = names[i];
	        func = nativeStringPrototype[name];
	        
	        try {
	            type = typeof func.apply('teststring', []);
	            retObj[name] = type;
	        }
	        catch (e) {}
	    }
	    
	    return retObj;
	}

	//****************************************************************************************************
	// getNativeStringPropertyNames
	//****************************************************************************************************
	function getNativeStringPropertyNames () {
		var name;
		var objectNames;
	    var results = [];
	    var stringNames;
	    
	    if (Object.getOwnPropertyNames) {
	        results = Object.getOwnPropertyNames(nativeStringPrototype);
	        results.splice(results.indexOf('valueOf'), 1);
	        results.splice(results.indexOf('toString'), 1);
	        return results;
	    }
	    else { //meant for legacy cruft, this could probably be made more efficient
	        stringNames = {};
	        objectNames = [];
	        
	        for (name in String.prototype)
	        stringNames[name] = name;

	        for (name in Object.prototype) {
	        	delete stringNames[name];
	        }

	        //stringNames['toString'] = 'toString'; //this was deleted with the rest of the object names
	        for (name in stringNames) {
	            results.push(name);
	        }
	        return results;
	    }
	}

	//****************************************************************************************************
	// initialize
	//****************************************************************************************************
	// Initialize a string object with a given value. 
	//----------------------------------------------------------------------------------------------------
	function initialize (object, value) {
	    if (value !== null && value !== undefined) {
	        if (typeof value === 'string') {
	        	object.s = value;
	    	}
	        else {
	        	object.s = value.toString();
	    	}
	    }
	    else {
	        object.s = value; //null or undefined
	    }

	    if (value !== null && value !== undefined) {
	        if (object.__defineGetter__) {
	            object.__defineGetter__('length', function() {
	                return object.s.length;
	            })
	        }
	        else {
	            object.length = value.length;
	        }
	    }
	    else {
	        object.length = -1;
	    }
	}
	
	//****************************************************************************************************
	// Str
	//****************************************************************************************************
	// The constructor for string objects.
	//----------------------------------------------------------------------------------------------------
	function Str (value) {
	    initialize(this, value);
	}
	
	//****************************************************************************************************
	//****************************************************************************************************
	//****************************************************************************************************
	//****************************************************************************************************

	//****************************************************************************************************
	// make
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	make = function make (value) {
	    return new Str(value);
	};
	
	//****************************************************************************************************
	//****************************************************************************************************
	//****************************************************************************************************
	//****************************************************************************************************

	//****************************************************************************************************
	// between
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.between = function between (left, right, caseOption) {
		caseOption = getCaseOption(caseOption);
		var s = this.s;
		
		if (caseOption === CASE.INSENSITIVE) {
			s = s.toUpperCase();
			left = left.toUpperCase();
			right = right.toUpperCase();
		}
		
		var startPos = s.indexOf(left);
		var endPos = s.indexOf(right);
		var start = startPos + left.length;
		return new this.constructor(endPos > startPos ?  this.s.slice(start, endPos) : "");
	};

	//****************************************************************************************************
	// capitalize
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.capitalize = function capitalize () {
	    return new this.constructor(this.s.substr(0, 1).toUpperCase() + this.s.substring(1).toLowerCase());
	};
	
	//****************************************************************************************************
	// chompLeft
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.chompLeft = function chompLeft (prefix, caseOption) {
		caseOption = getCaseOption(caseOption);
	    var s = this.s;
	    
		if (caseOption === CASE.INSENSITIVE) {
			s = s.toUpperCase();
			prefix = prefix.toUpperCase();
		}
		
	    if (s.indexOf(prefix) === 0) {
	        s = this.s.slice(prefix.length);
	        return new this.constructor(s);
	    }
	    else {
	        return this;
	    }
	};
	
	//****************************************************************************************************
	// chompRight
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.chompRight = function chompRight (suffix, caseOption) {
	    if (this.endsWith(suffix, caseOption)) {
	        var s = this.s;
	        s = s.slice(0, s.length - suffix.length);
	        return new this.constructor(s);
	    }
	    else {
	        return this;
	    }
	};

	//****************************************************************************************************
	// collapseWhitespace
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.collapseWhitespace = function collapseWhitespace () {
	    var s = this.s.replace(/[\s\xa0]+/g, ' ').replace(/^\s+|\s+$/g, '');
	    return new this.constructor(s);
	};

	//****************************************************************************************************
	// compareTo
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.compareTo = function compareTo (value, caseOption) {
		var s1;
		var s2;
		
		caseOption = getCaseOption(caseOption);

		if (this.s === null) {
			if (value === null) return 0; else throw new Error("Cannot compare null to non-null value.");
		}
		
		if (typeof this.s === 'undefined' || typeof value === 'undefined') {
			throw new Error("Cannot compare undefined values.");
		}
		
		s1 = this.toString();
		s2 = value.toString();
		
	    if (caseOption === CASE.INSENSITIVE) {
			s1 = s1.toUpperCase();
			s2 = s2.toUpperCase();
	    }
		
    	if (s1 === s2) {
    		return 0;
    	}
    	else if (s1 > s2) {
    		return 1;
    	}
    	else {
    		return -1;
    	}
	};		

	//****************************************************************************************************
	// contains
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.contains = function contains (value, caseOption) {
		var s = this.s;
		caseOption = getCaseOption(caseOption);
		
		if (caseOption === CASE.INSENSITIVE) {
			s = s.toUpperCase();
			value = value.toUpperCase();
		}
		
	    return s.indexOf(value) >= 0;
	};
	
	//****************************************************************************************************
	// count
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.count = function count (value, caseOption) {
	    caseOption = getCaseOption(caseOption);
		var s = this.s;
	    var count = 0;
	    
		if (caseOption === CASE.INSENSITIVE) {
			s = s.toUpperCase();
			value = value.toUpperCase();
		}
		
	    var pos = s.indexOf(value);

	    while (pos >= 0) {
	        count += 1;
	        pos = s.indexOf(value, pos + 1);
	    }

	    return count;
	};

	//****************************************************************************************************
	// dasherize
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.dasherize = function dasherize () {
	    var s = this.trim().s.replace(/[_\s]+/g, '-').replace(/([A-Z])/g, '-$1').replace(/-+/g, '-').toLowerCase();
	    return new this.constructor(s);
	};

	//****************************************************************************************************
	// endsWith
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.endsWith = function endsWith (suffix, caseOption) {
		caseOption = getCaseOption(caseOption);
		var s = this.s;
		
		if (caseOption === CASE.INSENSITIVE) {
			s = s.toUpperCase();
			suffix = suffix.toUpperCase();
		}
		
	    var l = s.length - suffix.length;
	    return l >= 0 && s.indexOf(suffix, l) === l;
	};

	//****************************************************************************************************
	// ensureLeft
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.ensureLeft = function ensureLeft (prefix, caseOption) {
	    var s = this.s;
	    
	    if (this.startsWith(prefix, caseOption)) {
	        return this;
	    }
	    else {
	        return new this.constructor(prefix + s);
	    }
	};

	//****************************************************************************************************
	// ensureRight
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.ensureRight = function ensureRight (suffix, caseOption) {
	    var s = this.s;
	    
	    if (this.endsWith(suffix, caseOption)) {
	        return this;
	    }
	    else {
	        return new this.constructor(s + suffix);
	    }
	};

	//****************************************************************************************************
	// indexOf
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.indexOf = function indexOf (value, caseOption, start) {
		caseOption = getCaseOption(caseOption);
		var s = this.s;
		
	    if (caseOption === CASE.SENSITIVE) {
	        return s.indexOf(value, start);
	    }
	    else {
	        return s.toUpperCase().indexOf(value.toUpperCase(), start);
	    }
	};
	
	//****************************************************************************************************
	// isAlpha
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.isAlpha = function isAlpha () {
	    return !/[^a-z\xC0-\xFF]/.test(this.s.toLowerCase());
	};

	//****************************************************************************************************
	// isAlphaNumeric
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.isAlphaNumeric = function isAlphaNumeric () {
	    return !/[^0-9a-z\xC0-\xFF]/.test(this.s.toLowerCase());
	};

	//****************************************************************************************************
	// isEmpty
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.isEmpty = function isEmpty () {
	    return this.s === null || this.s === undefined ? true : /^[\s\xa0]*$/.test(this.s);
	};

	//****************************************************************************************************
	// isEqualTo
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.isEqualTo = function isEqualTo (value, caseOption) {
		caseOption = getCaseOption(caseOption);

		if (this.s === null) {
			return value === null;
		}
		
		if (typeof this.s === 'undefined') {
			return typeof value === 'undefined';
		}
		
		if (value === null || typeof value === 'undefined') {
			return false;
		}
		
	    if (caseOption === CASE.SENSITIVE) {
	        return this.toString() === value.toString();
	    }

	    return this.toString().toUpperCase() === value.toString().toUpperCase();
	};		

	//****************************************************************************************************
	// isLower
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.isLower = function isLower () {
	    return this.isAlpha() && this.s.toLowerCase() === this.s;
	};

	//****************************************************************************************************
	// isNumeric
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.isNumeric = function isNumeric () {
	    return !/[^0-9]/.test(this.s);
	};

	//****************************************************************************************************
	// isUpper
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.isUpper = function isUpper () {
	    return this.isAlpha() && this.s.toUpperCase() === this.s;
	};

	//****************************************************************************************************
	// lastIndexOf
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.lastIndexOf = function lastIndexOf (value, caseOption, start) {
		caseOption = getCaseOption(caseOption);
		var s = this.s;
		
	    if (caseOption === CASE.SENSITIVE) {
	        return s.lastIndexOf(value, start);
	    }
	    else {
	        return s.toUpperCase().lastIndexOf(value.toUpperCase(), start);
	    }
	};
	
	//****************************************************************************************************
	// left
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.left = function left (N) {
	    if (N >= 0) {
	        var s = this.s.substr(0, N);
	        return new this.constructor(s);
	    }
	    else {
	        return this.right(-N);
	    }
	};    
    
	//****************************************************************************************************
	// lines
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.lines = function lines () {
	    return this.newlinesToUnix().s.split('\n');
	};

	//****************************************************************************************************
	// newlinesToUnix
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.newlinesToUnix = function newlinesToUnix () {
		return this.replace(/(\r\n|\r|\n)/g, '\n', CASE.SENSITIVE);
	};

	//****************************************************************************************************
	// orPlural
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.orPlural = function orPlural (number, pluralSuffix, plural) {
	    pluralSuffix = pluralSuffix || 's';

	    return number === 1 ? this : plural ? new this.constructor(plural.toString()) : new this.constructor(this.toString() + pluralSuffix.toString());
	};

	//****************************************************************************************************
	// pad
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.pad = function pad (length, character) {
	    character = character || ' ';
	    if (this.s.length >= length) return new this.constructor(this.s);
	    length = length - this.s.length;
	    var left = Array(Math.ceil(length / 2) + 1).join(character);
	    var right = Array(Math.floor(length / 2) + 1).join(character);
	    return new this.constructor(left + this.s + right);
	};

	//****************************************************************************************************
	// padLeft
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.padLeft = function padLeft (length, character) {
	    character = character || ' ';
	    if (this.s.length >= length) return new this.constructor(this.s);
	    return new this.constructor(Array(length - this.s.length + 1).join(character) + this.s);
	};

	//****************************************************************************************************
	// padRight
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.padRight = function padRight (length, character) {
	    character = character || ' ';
	    if (this.s.length >= length) return new this.constructor(this.s);
	    return new this.constructor(this.s + Array(length - this.s.length + 1).join(character));
	};

	//****************************************************************************************************
	// parenthesize
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.parenthesize = function parenthesize () {
	    return this.wrap('(', ')');
	};

	//****************************************************************************************************
	// quote
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.quote = function quote () {
	    return this.surround('"');
	};

	//****************************************************************************************************
	// repeat
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.repeat = function repeat (n) {
	    return new this.constructor(new Array(n + 1).join(this.s));
	};

	//****************************************************************************************************
	// replace
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.replace = function replace (oldString, newString, caseOption) {
		caseOption = getCaseOption(caseOption);
	    var s = this.s;

		if (caseOption === CASE.SENSITIVE) {
			return new this.constructor(this.s.replace(oldString, newString));
		}
		else {
			s = s.replace(new RegExp(oldString.toString().replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g, "\\$&"), "i"), newString.toString().replace(/\$/g, "$$$$"));
			return new this.constructor(s);
		}
	};
		
	//****************************************************************************************************
	// replaceAll
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.replaceAll = function replaceAll (oldString, newString, caseOption) {
		caseOption = getCaseOption(caseOption);
	    var s = this.s;

		if (caseOption === CASE.SENSITIVE) {
		    return new this.constructor(s.split(oldString).join(newString));
		}
		else {
			s = s.replace(new RegExp(oldString.toString().replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g, "\\$&"), "gi"), newString.toString().replace(/\$/g, "$$$$"));
			return new this.constructor(s);
		}
	};

	//****************************************************************************************************
	// right
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.right = function right (N) {
	    if (N >= 0) {
	        var s = this.s.substr(this.s.length - N, N);
	        return new this.constructor(s);
	    }
	    else {
	        return this.left(-N);
	    }
	};

	//****************************************************************************************************
	// setValue
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.setValue = function setValue (value) {
	    initialize(this, value);
	    return this;
	};

	//****************************************************************************************************
	// slugify
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.slugify = function slugify () {
	    var sl = (new this.constructor(this.s.replace(/[^\w\s-]/g, '').toLowerCase())).dasherize().s;
	    if (sl.charAt(0) === '-') sl = sl.substr(1);
	    return new this.constructor(sl);
	};

	//****************************************************************************************************
	// startsWith
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.startsWith = function startsWith (prefix, caseOption) {
		var s = this.s;
		caseOption = getCaseOption(caseOption);

		if (caseOption === CASE.INSENSITIVE) {
			s = s.toUpperCase();
			prefix = prefix.toUpperCase();
		}
		
	    return s.lastIndexOf(prefix, 0) === 0;
	};    

	//****************************************************************************************************
	// stripPunctuation
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.stripPunctuation = function stripPunctuation () {
	    return new this.constructor(this.s.replace(/[^\w\s]|_/g, "").replace(/\s+/g, " "));
	};    

	//****************************************************************************************************
	// surround
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.surround = function surround (value) {
	    return new this.constructor([value, this.s, value].join(''));
	};
	
	//****************************************************************************************************
	// toBoolean
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.toBoolean = function toBoolean () {
	    if (typeof this.s === 'string') {
	        var s = this.s.toLowerCase();
	        return s === 'true' || s === 'yes' || s === 'on' || s === '1';
	    }
	    else {
	    	return false;
	    }
	};

	//****************************************************************************************************
	// toFloat
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.toFloat = function toFloat (precision) {
	    var num = parseFloat(this.s);
	    if (precision) return parseFloat(num.toFixed(precision))
	    else return num
	};

	//****************************************************************************************************
	// toInt
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.toInt = function toInt () { //thanks Google
	    // If the string starts with '0x' or '-0x', parse as hex.
	    return /^\s*-?0x/i.test(this.s) ? parseInt(this.s, 16) : parseInt(this.s, 10)
	};

	//****************************************************************************************************
	// toString
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.toString = function toString () {
	    return this.s;
	};

	//****************************************************************************************************
	// trimLeft
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.trimLeft = function trimLeft () {
	    var s;
	    if (nativeStringPrototype.trimLeft) s = this.s.trimLeft();
	    else s = this.s.replace(/(^\s*)/g, '');
	    return new this.constructor(s);
	};

	//****************************************************************************************************
	// trimRight
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.trimRight = function trimRight () {
	    var s;
	    if (nativeStringPrototype.trimRight) s = this.s.trimRight();
	    else s = this.s.replace(/\s+$/, '');
	    return new this.constructor(s);
	};

	//****************************************************************************************************
	// truncate
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.truncate = function truncate (length, pruneStr) { //from underscore.string, author: github.com/rwz
	    var str = this.s;

	    length = ~~length;
	    pruneStr = typeof pruneStr === 'string' || pruneStr instanceof Str ? pruneStr : '...';

	    if (str.length <= length) return new this.constructor(str);

	    var tmpl = function(c) {
	            return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';
	        },
	        template = str.slice(0, length + 1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'
	    if (template.slice(template.length - 2).match(/\w\w/)) template = template.replace(/\s*\S+$/, '');
	    else template = new this.constructor(template.slice(0, template.length - 1)).trimRight().s;

	    return (template + pruneStr).length > str.length ? new this.constructor(str) : new this.constructor(str.slice(0, template.length) + pruneStr);
	};

	//****************************************************************************************************
	// valueOf
	//****************************************************************************************************
	Str.prototype.valueOf = function valueOf () {
	    return this.s.valueOf();
	};

	//****************************************************************************************************
	// words
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.words = function words (delimiter) {
	    if (this.isEmpty()) return [];
	    return this.trim().split(delimiter || /\s+/);
	};

	//****************************************************************************************************
	// wrap
	//****************************************************************************************************
	//----------------------------------------------------------------------------------------------------
	Str.prototype.wrap = function wrap (front, back) {
	    return new this.constructor([front, this.s, back].join(''));
	};
	
	//****************************************************************************************************
	//****************************************************************************************************
	// Module Initialization
	//****************************************************************************************************
	//****************************************************************************************************

	//----------------------------------------------------------------------------------------------------
	// Give our string object the properties of native Javascript String objects.
	//----------------------------------------------------------------------------------------------------
	attachNativeStringProperties();

	//----------------------------------------------------------------------------------------------------
	// Set the constructor. Without this, string objects are instances of Object instead of Str. 
	//----------------------------------------------------------------------------------------------------
	Str.prototype.constructor = Str;


	//****************************************************************************************************
	//****************************************************************************************************
	// Set this module's public interface.
	//****************************************************************************************************
	//****************************************************************************************************
	publicInterface = {};

	publicInterface.CASE = CASE;
	publicInterface.make = make;
	
	return publicInterface;
});

//****************************************************************************************************
//****************************************************************************************************
//****************************************************************************************************
//****************************************************************************************************
//****************************************************************************************************
//****************************************************************************************************
//----------------------------------------------------------------------------------------------------
//****************************************************************************************************
//****************************************************************************************************
//----------------------------------------------------------------------------------------------------

//****************************************************************************************************
//****************************************************************************************************

